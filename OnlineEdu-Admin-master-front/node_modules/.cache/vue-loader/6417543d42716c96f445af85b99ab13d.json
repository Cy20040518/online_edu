{"remainingRequest":"C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\src\\views\\edu_course\\educourse_list.vue?vue&type=template&id=967d4d66&scoped=true","dependencies":[{"path":"C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\src\\views\\edu_course\\educourse_list.vue","mtime":1646101641000},{"path":"C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86193\\Desktop\\OnlineEdu-Admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}